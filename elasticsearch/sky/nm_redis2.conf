input
{
  redis {
      data_type => "list"
      key => "filebeat"
      host => "localhost"
      port => "6379"
      password => "Qwe0987^"
      timeout => 20
  }
}

filter {
    if[service] =~ "storage" {
        grok {
            #切割后日期名字叫logdate
            match => ["message", "(?<debuglevel>[IDWFE])(?<timestamp>[0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2}) +(?<linenumber>[0-9]+) (?<filename>.*\]) (?<message>.*)"]
            overwrite => ["message"]
        }

        if[message] =~ "upload func use time" {
            grok {
                #切割后日期名字叫logdate
                match => ["message", "upload func use time '(?<uploadtime>[0-9]+) ms'"]
            }
        }

        mutate {
            convert => { "uploadtime" => "integer" }
        }

        date {
            #logdate 从上面过滤后取到的字段名，yyyy-MM-dd HH:mm:ss.SSS 日期格式条件
            match => ["timestamp", "MMdd HH:mm:ss"]
            #match => ["logdate", "yyyyMMdd","yyyy-MM-dd"]
            #赋值给那个key
            #target => "@timestamp"
            #删除不需要的字段
            #remove_field => ["logdate"]
        }

    } else if[service] =~ "sealer" {
        if [message] =~ "ERROR" {
            mutate {
                update => {"log_type" => "error"}
            }
        }

        if [message] =~ "check precommit invalid" {
            mutate {
                update => {"log_type" => "check"}
            }
        }

        if [message] =~ /.*updated.*SealCommitFailed.*/ {
            mutate {
                update => {"log_type" => "failed"}
            }
        }

        if [message] =~ /.*replace.*Proving.*/ {
            mutate {
                update => {"log_type" => "ok"}
            }
        }

        if [message] =~ "recv reply from" {
            mutate {
                update => {"log_type" => "zk_time"}
            }
        }

        if [message] =~ "GasEstimateMessageGas error" {
            mutate {
                update => {"log_type" => "lotusUploadFail"}
            }
        }

        if [message] =~ "= upload fail" {
            mutate {
                update => {"log_type" => "uploadRec"}
            }
        }

        if [message] =~ "state: UploadFailed" {
            mutate {
                update => {"log_type" => "uploadFail"}
            }
        }

        #sealer =========================流水状态=========================
        if [message] =~ "updated state to" {
            mutate {
                update => {"service" => "sealer_status"}
            }

            if [message] =~ "updated state to Empty" {
                mutate {
                    update => {"log_type" => "empty"}
                }
            }

            if [message] =~ "updated state to Packing" {
                mutate {
                    update => {"log_type" => "packing"}
                }
            }
            if [message] =~ "updated state to GetTicket" {
                mutate {
                    update => {"log_type" => "get_ticket"}
                }
            }
            if [message] =~ "updated state to AllocSVol" {
                mutate {
                    update => {"log_type" => "allocs_vol"}
                }
            }
            if [message] =~ "updated state to Unsealed" {
                mutate {
                    update => {"log_type" => "un_sealed"}
                }
            }
            if [message] =~ "updated state to Upload" {
                mutate {
                    update => {"log_type" => "upload"}
                }
            }
            if [message] =~ "updated state to PreCommitting" {
                mutate {
                    update => {"log_type" => "pre_committing"}
                }
            }
            if [message] =~ "updated state to PreCommitted" {
                mutate {
                    update => {"log_type" => "pre_committed"}
                }
            }
            if [message] =~ "updated state to WaitSeed" {
                mutate {
                    update => {"log_type" => "wait_seed"}
                }
            }
            if [message] =~ "updated state to Committing" {
                mutate {
                    update => {"log_type" => "committing"}
                }
            }
            if [message] =~ "updated state to CommitWait" {
                mutate {
                    update => {"log_type" => "commit_wait"}
                }
            }
            if [message] =~ "updated state to Proving" {
                mutate {
                    update => {"log_type" => "proving"}
                }
            }
            if [message] =~ "updated state to WaitSeedFailed" {
                mutate {
                    update => {"log_type" => "wait_seed_failed"}
                }
            }
            if [message] =~ "updated state to SealCommitFailed" {
                mutate {
                    update => {"log_type" => "seal_commit_failed"}
                }
            }
            if [message] =~ "updated state to CommitFailed" {
                mutate {
                    update => {"log_type" => "commit_failed"}
                }
            }
            if [message] =~ "updated state to BeforeSealFailed" {
                mutate {
                    update => {"log_type" => "before_seal_failed"}
                }
            }
            if [message] =~ "updated state to SealFailed" {
                mutate {
                    update => {"log_type" => "seal_failed"}
                }
            }
            if [message] =~ "updated state to UploadFailed" {
                mutate {
                    update => {"log_type" => "upload_failed"}
                }
            }
            if [message] =~ "updated state to PreCommitFailed" {
                mutate {
                    update => {"log_type" => "pre_commit_failed"}
                }
            }
            if [message] =~ "updated state to PackingFailed" {
                 mutate {
                     update => {"log_type" => "packing_failed"}
                 }
            }
            if [message] =~ "updated state to CommitEnd" {
                 mutate {
                     update => {"log_type" => "commit_end"}
                 }
            }

            grok {
                match => ["message", "(?<timestamp>\d{4}-\d{2}-\d{2}T\d+\:\d+\:\d+\.\d+\+\d+).*miner: (?<miner>\w+).*sector: (?<sector>\d+)"]
            }
            mutate {
                convert => { "sector" => "integer" }
            }
        } else {
            #其他sealer 数据
            grok {
                match => ["message", "%{TIMESTAMP_ISO8601:timestamp}(?<message>.*)"]
                overwrite => ["message"]

            }
        }
        #^sealer =========================流水状态=========================^

        if[log_type] == "zk_time" {
            grok {
                match => ["message", "cost: (?<time.h>(\d+(?=h))?)h?(?<time.m>(\d+(?=m))?)m?(?<time.s>\d+\.?\d*)s"]
            }
            mutate {
                convert => { "time.h" => "integer" }
                convert => { "time.m" => "integer" }
                convert => { "time.s" => "integer" }
            }
            if[time.h] {
                ruby {
                    code => 'event.set("time.hm", (event.get("time.h").to_i * 60) + event.get("time.m").to_i)'
                }
            } else {
                ruby {
                    code => 'event.set("time.hm", event.get("time.m").to_i)'
                }
            }
            mutate {
                convert => { "time.hm" => "integer" }
            }
        }
    } else if[service] == "window" {


    } else if[service] == "recover" {

    } else if[service] == "zk" {

        mutate {
            gsub => ["message", "\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]", ""]
        }

        grok {
            #切割后日期名字叫logdate
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp}"]
        }

        date {
            #logdate 从上面过滤后取到的字段名，yyyy-MM-dd HH:mm:ss.SSS 日期格式条件
            match => ["timestamp", "ISO8601"]
            #match => ["logdate", "yyyyMMdd","yyyy-MM-dd"]
            #赋值给那个key
            #target => "@timestamp"
            #删除不需要的字段
            #remove_field => ["logdate"]
        }

        if[message] =~ "complete seal prove commit" {
            grok {
                #切割后日期名字叫logdate
                match => ["message", "cost: (?<time.h>(\d+(?=h))?)h?(?<time.m>(\d+(?=m))?)m?(?<time.s>\d+\.?\d*)s"]
            }
            mutate {
                update => {"log_type" => "zk"}
                convert => { "time.h" => "integer" }
                convert => { "time.m" => "integer" }
                convert => { "time.s" => "integer" }
            }

            if[time.h] {
                ruby {
                    code => 'event.set("time.hm", (event.get("time.h").to_i * 60) + event.get("time.m").to_i)'
                }
            } else {
                ruby {
                    code => 'event.set("time.hm", event.get("time.m").to_i)'
                }
            }
            mutate {
                convert => { "time.hm" => "integer" }
            }
        }
        if[message] =~ "ERROR" {
            mutate {
                update => {"log_type" => "zk_error"}
            }
        }

    } else if[service] == "miner" {
        if [message] =~ "ERROR" {
            mutate {
                update => {"log_type" => "error"}
            }
        }

        if [message] =~ "mined new block" {
            mutate {
                update => {"log_type" => "mined"}
            }
        }

        grok {
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp}(?<message>.*)"]
            overwrite => ["message"]

        }
    } else if[service] == "ry" {
        grok {
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp}.*sector: (?<sector>\d+).*miner: (?<miner>\w+)"]
        }
    } elseif[service] == "rebuild" {
        if [message] =~ /\[on chain\]/ {
            mutate {
                update => {"log_type" => "end"}
            }

            grok {
                match => ["message", "%{TIMESTAMP_ISO8601:timestamp}.*miner: (?<miner>\w+), sector: (?<sector>\d+).*message: (?<signature>\w+)"]
            }
        }
        if [message] =~ /\[unexpected\]/ {
            mutate {
                update => {"log_type" => "unexpected"}
            }

            grok {
                match => ["message", "%{TIMESTAMP_ISO8601:timestamp}.*miner: (?<miner>\w+), sector: (?<sector>\d+)"]
            }
        }
    } elseif[service] == "integrate_sch" {
        grok {
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp}"]
        }

        if [message] =~ "recv reply from worker" {
            mutate {
                update => {"log_type" => "work_done"}
            }

            grok {
                match => ["message", "%{TIMESTAMP_ISO8601:timestamp}.*deadline: (?<deadline>\d+)\-(?<index>\d+).*wdpost-worker-(?<worker>[a-z0-9|\-]+)\].*cost: (?<time.m>\d+)m(?<time.s>[\d+\.\d+|\d+]+)s"]
            }
        }

        if [message] =~ "push submit window PoSt message" {
            mutate {
                update => {"log_type" => "push_msg"}
            }

            grok {
                match => ["message", "%{TIMESTAMP_ISO8601:timestamp}.*deadline: (?<deadline>\d+).*index: (?<index>\d+)"]
            }
        }

        if [message] =~ "wait submit window PoSt message" {
            mutate {
                update => {"log_type" => "wait_msg"}
            }

            grok {
                match => ["message", "%{TIMESTAMP_ISO8601:timestamp}.*deadline: (?<deadline>\d+).*index: (?<index>\d+)"]
            }
        }

        if [message] =~ "submit window PoSt successfully" {
            mutate {
                update => {"log_type" => "success"}
            }

            grok {
                match => ["message", "%{TIMESTAMP_ISO8601:timestamp}.*deadline: (?<deadline>\d+).*index: (?<index>\d+)"]
            }
        }

    } elseif[service] == "integrate_worker" {
        grok {
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp}"]
        }

        if [message] =~ "host-id:" {
            mutate {
                update => {"log_type" => "host_id"}
            }

            grok {
                match => ["message", "%{TIMESTAMP_ISO8601:timestamp}.*host-id: (?<worker>[a-z0-9|\-]+)"]
            }
        }

        if [message] =~ "start post" {
            mutate {
                update => {"log_type" => "start_post"}
            }

            grok {
                match => ["message", "%{TIMESTAMP_ISO8601:timestamp}.*miner: (?<miner>\w+).*deadline: (?<deadline>\d+).*index: (?<index>\d+)"]
            }
        }

        if [message] =~ "verify window post pass" {
            mutate {
                update => {"log_type" => "verify_window"}
            }

            grok {
                match => ["message", "%{TIMESTAMP_ISO8601:timestamp}.*miner: (?<miner>\w+).*deadline: (?<deadline>\d+).*index: (?<index>\d+)"]
            }
        }
    } else {
        mutate {
            gsub => ["message", "\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]", ""]
        }

        grok {
            #切割后日期名字叫logdate
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp}"]
        }

        date {
            #logdate 从上面过滤后取到的字段名，yyyy-MM-dd HH:mm:ss.SSS 日期格式条件
            match => ["timestamp", "ISO8601"]
            #match => ["logdate", "yyyyMMdd","yyyy-MM-dd"]
            #赋值给那个key
            #target => "@timestamp"
            #删除不需要的字段
            #remove_field => ["logdate"]
        }
    }
}

#输出到es中
output
{
#通过自定义字段fields.service判断日志是属于哪个服务的，相同的服务输出到一个index中
  if[service] {
      if[service] == "recover" {
        elasticsearch {
          hosts =>["172.20.30.45:9200"]
          user => "elastic"
          password => "VJX3cpwy6PQl3L948eTI"
          index => "logstash-%{service}-%{+YYYY.MM}"
          http_compression => true
        }
      }else if[log_type] == "zk_time" {
        elasticsearch {
          hosts =>["172.20.30.45:9200"]
          user => "elastic"
          password => "VJX3cpwy6PQl3L948eTI"
          index => "logstash-sealer-zktime-%{+YYYY.MM.dd}"
          http_compression => true
        }
      } else {

          elasticsearch {
            hosts =>["172.20.30.45:9200"]
            user => "elastic"
            password => "VJX3cpwy6PQl3L948eTI"
            index => "logstash-%{service}-%{+YYYY.MM.dd}"
            http_compression => true
          }

      }
    } else {
      elasticsearch {
          hosts =>["172.20.30.45:9200"]
          user =>"elastic"
          password =>"VJX3cpwy6PQl3L948eTI"
          index =>"logstash-other-%{+YYYY.MM.dd}"
          http_compression =>true
      }
  }
}