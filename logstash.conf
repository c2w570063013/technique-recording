input
{
  redis {
      data_type => "list"
      key => "filebeat"
      host => "localhost"
      port => "6379"
      password => "Qwe0987^"
  }
}

filter {
    if[service] =~ "storage" {
        grok {
            #切割后日期名字叫logdate
            match => ["message", "(?<debuglevel>[IDWFE])(?<timestamp>[0-9]{4} [0-9]{2}:[0-9]{2}:[0-9]{2}) +(?<linenumber>[0-9]+) (?<filename>.*\]) (?<message>.*)"]
            overwrite => ["message"]
        }

        if[message] =~ "upload func use time" {
            grok {
                #切割后日期名字叫logdate
                match => ["message", "upload func use time '(?<uploadtime>[0-9]+) ms'"]
            }
        }

        mutate {
            convert => { "uploadtime" => "integer" }
        }

        date {
            #logdate 从上面过滤后取到的字段名，yyyy-MM-dd HH:mm:ss.SSS 日期格式条件
            match => ["timestamp", "MMdd HH:mm:ss"]
            #match => ["logdate", "yyyyMMdd","yyyy-MM-dd"]
            #赋值给那个key
            #target => "@timestamp"
            #删除不需要的字段
            #remove_field => ["logdate"]
        }

    } else if[service] =~ "sealer" {
        #sealer 数据
        grok {
            match => ["message", "%{TIMESTAMP_ISO8601:timestamp}(?<message>.*)"]
        }
    } else if[service] == "cpu" {
        grok {
            match => ["message", ".*load average: (?<cpu1>\d{1,3}\.\d{1,2}), (?<cpu2>\d{1,3}\.\d{1,2}), (?<cpu3>\d{1,3}\.\d{1,2})"]
        }
    } else {
        if[service] != "recover" {
            mutate {
                gsub => ["message", "\x1B\[([0-9]{1,2}(;[0-9]{1,2})?)?[m|K]", ""]
            }

            grok {
                #切割后日期名字叫logdate
                match => ["message", "%{TIMESTAMP_ISO8601:timestamp}"]
            }

            date {
                #logdate 从上面过滤后取到的字段名，yyyy-MM-dd HH:mm:ss.SSS 日期格式条件
                match => ["timestamp", "ISO8601"]
                #match => ["logdate", "yyyyMMdd","yyyy-MM-dd"]
                #赋值给那个key
                #target => "@timestamp"
                #删除不需要的字段
                #remove_field => ["logdate"]
            }

            if[message] =~ "complete seal prove commit" {
                grok {
                    #切割后日期名字叫logdate
                    match => ["message", "cost: (?<time.h>(\d+(?=h))?)h?(?<time.m>(\d+(?=m))?)m?(?<time.s>\d+\.?\d*)s"]
                }
                mutate {
                    convert => { "time.h" => "integer" }
                    convert => { "time.m" => "integer" }
                    convert => { "time.s" => "integer" }
                }
            }
        }
    }
}

#输出到es中
output
{
#通过自定义字段fields.service判断日志是属于哪个服务的，相同的服务输出到一个index中
  if[service] {
      if[service] == "recover" or [service] == "cpu" {
        elasticsearch {
          hosts =>["172.20.201.200:9200"]
          user => "elastic"
          password => "VJX3cpwy6PQl3L948eTI"
          index => "logstash-%{service}-%{+YYYY.MM}"
          http_compression => true
        }
      }else {
        elasticsearch {
          hosts =>["172.20.201.200:9200"]
          user => "elastic"
          password => "VJX3cpwy6PQl3L948eTI"
          index => "logstash-%{service}-%{+YYYY.MM.dd}"
          http_compression => true
        }
      }
    } else {
      elasticsearch {
          hosts =>["172.20.201.200:9200"]
          user =>"elastic"
          password =>"VJX3cpwy6PQl3L948eTI"
          index =>"logstash-other-%{+YYYY.MM.dd}"
          http_compression =>true
      }
  }
}